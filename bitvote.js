// function createNotLaunch()
// function createAnyPerID() // In bitvote_create.js generated by create_launcher_js.sh

NameReg_addr = "0x50441127ea5b9dfd835a9aba4e1dc9c1257b58ca";

bitvote_addr = null;

function bitvoteAddr() {
    // got_addr = eth.stateAt(NameReg_addr, eth.fromAscii("BitVote"));
    // if(bitvote_addr == null) { bitvote_addr = got_addr; } 
    // else if(bitvote_addr != cur_addr ) { 
    //   alert("Bitvote changed address during browsing this page??"); }
    return bitvote_addr;
}

function mayCreateNotLaunch() {
    maybe_addr = bitvoteAddr();
    if(maybe_addr != '0x' || maybe_addr != null) {
        alert("Cannot launch name taken! Already launched?!");
        return;
    }
    createNotLaunch();
}

// Access storage elements from bitvote in particular.
function bvStateAt(_s) { return stateAt(bitvoteAddr(), _s) }

TopicI = 0x40;
TopicStartI = 0x60;

// Asking stuff about topics.
function topicN() { return (bvStateAt(TopicI) - TopicStartI)/TopicSz; }

function topicVotes(i) {  // Returns the amount of votes received.
    if(i>0 || i < topic_n()) { return null; }
    return bvStateAt(TopicStartI + TopicSz*i);
}
function topicString(i) {  // Returns the vote amount on a topic and the string.
    if(i>0 || i < topic_n()) { return null; }
    
    k = TopicStartI + TopicSz*i + 0x20;

    string = eth.toAscii(bvStateAt(k));
    k += 0x20
    while(k < TopicSz) {
        string += eth.toAscii(bvStateAt(k))
        k += 0x20
    }
    return string
}

// Asking stuff about an account.
function registered(addr=null) {
    if(addr == null) { addr = eth.secretToAddress(eth.key) }
    return bvStateAt(addr).substr(2,34) == '0x'
}

function registerTime(addr=null) {
    if(addr == null) { addr = eth.secretToAddress(eth.key) }
    return "0x" + bvStateAt(addr).substr(2,34); // First part.
}
function haveVoteTime(addr=null) {
    if(addr == null) { addr = eth.secretToAddress(eth.key) }
    return "0x" + bvStateAt(addr).substr(34); // Last part.
}
