// function createNotLaunch() // In bitvote_create.js generated by create_launcher_js.sh

var NameReg_addr = "0x50441127ea5b9dfd835a9aba4e1dc9c1257b58ca";

var bitvote_addr = null;
var anyperid_addr = null

function myAddr() {
    return eth.secretToAddress(eth.key)
}
function launchAddr() {
    return eth.secretToAddress(launch_key);
}

function bitvoteAddr() {
    // TODO... use NameReg, also this is not robust enough if the bitvote
    //   contract ever changes name.
    // if(bitvote_addr == null) { 
    //   bitvote_addr = eth.stateAt(NameReg_addr, eth.fromAscii("BitVote")); }
    return bitvote_addr;
}

function mayCreateNotLaunch(bitvote_fun, anyperid_fun) {
    maybe_addr = bitvoteAddr();
    if(maybe_addr != '0x' && maybe_addr != null) {
        alert("Already created!");
        return;
    }
    createNotLaunch(launch_key, bitvote_fun, anyperid_fun);
}

// NOTE Non-serious of course, AnyPerID is a bad OnePerID, and user keeps
//  total control over it.
function launch(fun) {
    addr = bitvoteAddr();
    if(addr == '0x' || addr == null || anyperid_addr == '0x' || anyperid_addr == null) {
        alert("Need to create contracts first!");
        return;
    }
    data = [anyperid_addr, launch_key];
    eth.transact({"from":launch_key, "to":addr, "value":0, "data":data}, fun);
}

// Access storage elements from bitvote in particular.
function bvStateAt(_s) { return stateAt(bitvoteAddr(), _s) }

var TopicI = 0x40;
var TopicStartI = 0x60;

// Asking stuff about topics.
function topicN() { return (bvStateAt(TopicI) - TopicStartI)/TopicSz; }

function topicVotes(i) {  // Returns the amount of votes received.
    if(i>0 || i < topic_n()) { return null; }
    return bvStateAt(TopicStartI + TopicSz*i);
}
function topicString(i) {  // Returns the vote amount on a topic and the string.
    if(i>0 || i < topic_n()) { return null; }
    
    k = TopicStartI + TopicSz*i + 0x20;

    string = eth.toAscii(bvStateAt(k));
    k += 0x20;
    while(k < TopicSz) {
        string += eth.toAscii(bvStateAt(k));
        k += 0x20;
    }
    return string;
}

// Asking stuff about an account.
function registered(addr) {
    if(addr == null) { addr = myAddr() }
    return bvStateAt(addr).substr(2,34) == '0x'
}

function registerTime(addr) {
    if(addr == null) { addr = myAddr() }
    return "0x" + bvStateAt(addr).substr(2,34); // First part.
}
function haveVoteTime(addr) {
    if(addr == null) { addr = myAddr() }
    return "0x" + bvStateAt(addr).substr(34); // Last part.
}
